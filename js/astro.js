var J2000 = 2451545,
  JulianCentury = 36525,
  JulianMillennium = 365250,
  AstronomicalUnit = 149597870,
  TropicalYear = 365.24219878;
function astor(a) {
  return (Math.PI / 648e3) * a;
}
function dtr(a) {
  return (a * Math.PI) / 180;
}
function rtd(a) {
  return (180 * a) / Math.PI;
}
function fixangle(a) {
  return a - 360 * Math.floor(a / 360);
}
function fixangr(a) {
  return a - 2 * Math.PI * Math.floor(a / (2 * Math.PI));
}
function dsin(a) {
  return Math.sin(dtr(a));
}
function dcos(a) {
  return Math.cos(dtr(a));
}
function mod(c, b) {
  return c - b * Math.floor(c / b);
}
function amod(c, b) {
  return mod(c - 1, b) + 1;
}
function jhms(a) {
  return (
    (a += 0.5),
    (a = 86400 * (a - Math.floor(a)) + 0.5),
    [Math.floor(a / 3600), Math.floor((a / 60) % 60), Math.floor(a % 60)]
  );
}
var Weekdays = [
  "Sunday",
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday"
];
function jwday(a) {
  return mod(Math.floor(a + 1.5), 7);
}
var oterms = [
  -4680.93,
  -1.55,
  1999.25,
  -51.38,
  -249.67,
  -39.05,
  7.12,
  27.87,
  5.79,
  2.45
];
function obliqeq(d) {
  var f,
    g,
    h = (f = (d - J2000) / 3652500);
  if (((d = 23 + 26 / 60 + 21.448 / 3600), 1 > Math.abs(f)))
    for (g = 0; 10 > g; g++) (d += (oterms[g] / 3600) * h), (h *= f);
  return d;
}
var nutArgMult = [
    0,
    0,
    0,
    0,
    1,
    -2,
    0,
    0,
    2,
    2,
    0,
    0,
    0,
    2,
    2,
    0,
    0,
    0,
    0,
    2,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    -2,
    1,
    0,
    2,
    2,
    0,
    0,
    0,
    2,
    1,
    0,
    0,
    1,
    2,
    2,
    -2,
    -1,
    0,
    2,
    2,
    -2,
    0,
    1,
    0,
    0,
    -2,
    0,
    0,
    2,
    1,
    0,
    0,
    -1,
    2,
    2,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    2,
    0,
    -1,
    2,
    2,
    0,
    0,
    -1,
    0,
    1,
    0,
    0,
    1,
    2,
    1,
    -2,
    0,
    2,
    0,
    0,
    0,
    0,
    -2,
    2,
    1,
    2,
    0,
    0,
    2,
    2,
    0,
    0,
    2,
    2,
    2,
    0,
    0,
    2,
    0,
    0,
    -2,
    0,
    1,
    2,
    2,
    0,
    0,
    0,
    2,
    0,
    -2,
    0,
    0,
    2,
    0,
    0,
    0,
    -1,
    2,
    1,
    0,
    2,
    0,
    0,
    0,
    2,
    0,
    -1,
    0,
    1,
    -2,
    2,
    0,
    2,
    2,
    0,
    1,
    0,
    0,
    1,
    -2,
    0,
    1,
    0,
    1,
    0,
    -1,
    0,
    0,
    1,
    0,
    0,
    2,
    -2,
    0,
    2,
    0,
    -1,
    2,
    1,
    2,
    0,
    1,
    2,
    2,
    0,
    1,
    0,
    2,
    2,
    -2,
    1,
    1,
    0,
    0,
    0,
    -1,
    0,
    2,
    2,
    2,
    0,
    0,
    2,
    1,
    2,
    0,
    1,
    0,
    0,
    -2,
    0,
    2,
    2,
    2,
    -2,
    0,
    1,
    2,
    1,
    2,
    0,
    -2,
    0,
    1,
    2,
    0,
    0,
    0,
    1,
    0,
    -1,
    1,
    0,
    0,
    -2,
    -1,
    0,
    2,
    1,
    -2,
    0,
    0,
    0,
    1,
    0,
    0,
    2,
    2,
    1,
    -2,
    0,
    2,
    0,
    1,
    -2,
    1,
    0,
    2,
    1,
    0,
    0,
    1,
    -2,
    0,
    -1,
    0,
    1,
    0,
    0,
    -2,
    1,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    2,
    0,
    -1,
    -1,
    1,
    0,
    0,
    0,
    1,
    1,
    0,
    0,
    0,
    -1,
    1,
    2,
    2,
    2,
    -1,
    -1,
    2,
    2,
    0,
    0,
    -2,
    2,
    2,
    0,
    0,
    3,
    2,
    2,
    2,
    -1,
    0,
    2,
    2
  ],
  nutArgCoeff = [
    -171996,
    -1742,
    92095,
    89,
    -13187,
    -16,
    5736,
    -31,
    -2274,
    -2,
    977,
    -5,
    2062,
    2,
    -895,
    5,
    1426,
    -34,
    54,
    -1,
    712,
    1,
    -7,
    0,
    -517,
    12,
    224,
    -6,
    -386,
    -4,
    200,
    0,
    -301,
    0,
    129,
    -1,
    217,
    -5,
    -95,
    3,
    -158,
    0,
    0,
    0,
    129,
    1,
    -70,
    0,
    123,
    0,
    -53,
    0,
    63,
    0,
    0,
    0,
    63,
    1,
    -33,
    0,
    -59,
    0,
    26,
    0,
    -58,
    -1,
    32,
    0,
    -51,
    0,
    27,
    0,
    48,
    0,
    0,
    0,
    46,
    0,
    -24,
    0,
    -38,
    0,
    16,
    0,
    -31,
    0,
    13,
    0,
    29,
    0,
    0,
    0,
    29,
    0,
    -12,
    0,
    26,
    0,
    0,
    0,
    -22,
    0,
    0,
    0,
    21,
    0,
    -10,
    0,
    17,
    -1,
    0,
    0,
    16,
    0,
    -8,
    0,
    -16,
    1,
    7,
    0,
    -15,
    0,
    9,
    0,
    -13,
    0,
    7,
    0,
    -12,
    0,
    6,
    0,
    11,
    0,
    0,
    0,
    -10,
    0,
    5,
    0,
    -8,
    0,
    3,
    0,
    7,
    0,
    -3,
    0,
    -7,
    0,
    0,
    0,
    -7,
    0,
    3,
    0,
    -7,
    0,
    3,
    0,
    6,
    0,
    0,
    0,
    6,
    0,
    -3,
    0,
    6,
    0,
    -3,
    0,
    -6,
    0,
    3,
    0,
    -6,
    0,
    3,
    0,
    5,
    0,
    0,
    0,
    -5,
    0,
    3,
    0,
    -5,
    0,
    3,
    0,
    -5,
    0,
    3,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    -4,
    0,
    0,
    0,
    -4,
    0,
    0,
    0,
    -4,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    -3,
    0,
    0,
    0,
    -3,
    0,
    0,
    0,
    -3,
    0,
    0,
    0,
    -3,
    0,
    0,
    0,
    -3,
    0,
    0,
    0,
    -3,
    0,
    0,
    0,
    -3,
    0,
    0,
    0
  ];
function nutation(h) {
  var i,
    j = (h - 2451545) / 36525;
  h = [];
  var k,
    l = 0,
    m = 0,
    n = j * (i = j * j);
  for (
    h[0] = dtr(297.850363 + 445267.11148 * j - 0.0019142 * i + n / 189474),
      h[1] = dtr(357.52772 + 35999.05034 * j - 1603e-7 * i - n / 3e5),
      h[2] = dtr(134.96298 + 477198.867398 * j + 0.0086972 * i + n / 56250),
      h[3] = dtr(93.27191 + 483202.017538 * j - 0.0036825 * i + n / 327270),
      h[4] = dtr(125.04452 - 1934.136261 * j + 0.0020708 * i + n / 45e4),
      i = 0;
    5 > i;
    i++
  )
    h[i] = fixangr(h[i]);
  for (n = j / 10, i = 0; 63 > i; i++) {
    for (j = k = 0; 5 > j; j++)
      0 != nutArgMult[5 * i + j] && (k += nutArgMult[5 * i + j] * h[j]);
    (l += (nutArgCoeff[4 * i] + nutArgCoeff[4 * i + 1] * n) * Math.sin(k)),
      (m +=
        (nutArgCoeff[4 * i + 2] + nutArgCoeff[4 * i + 3] * n) * Math.cos(k));
  }
  return [l / 36e6, m / 36e6];
}
function ecliptoeq(d, f, g) {
  var c = dtr(obliqeq(d));
  return (
    (log += "Obliquity: " + rtd(c) + "\n"),
    (d = rtd(
      Math.atan2(
        Math.cos(c) * Math.sin(dtr(f)) - Math.tan(dtr(g)) * Math.sin(c),
        Math.cos(dtr(f))
      )
    )),
    (log += "RA = " + d + "\n"),
    (d = fixangle(
      rtd(
        Math.atan2(
          Math.cos(c) * Math.sin(dtr(f)) - Math.tan(dtr(g)) * Math.sin(c),
          Math.cos(dtr(f))
        )
      )
    )),
    (f = rtd(
      Math.asin(
        Math.sin(c) * Math.sin(dtr(f)) * Math.cos(dtr(g)) +
          Math.sin(dtr(g)) * Math.cos(c)
      )
    )),
    [d, f]
  );
}
var deltaTtab = [
  121,
  112,
  103,
  95,
  88,
  82,
  77,
  72,
  68,
  63,
  60,
  56,
  53,
  51,
  48,
  46,
  44,
  42,
  40,
  38,
  35,
  33,
  31,
  29,
  26,
  24,
  22,
  20,
  18,
  16,
  14,
  12,
  11,
  10,
  9,
  8,
  7,
  7,
  7,
  7,
  7,
  7,
  8,
  8,
  9,
  9,
  9,
  9,
  9,
  10,
  10,
  10,
  10,
  10,
  10,
  10,
  10,
  11,
  11,
  11,
  11,
  11,
  12,
  12,
  12,
  12,
  13,
  13,
  13,
  14,
  14,
  14,
  14,
  15,
  15,
  15,
  15,
  15,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  15,
  15,
  14,
  13,
  13.1,
  12.5,
  12.2,
  12,
  12,
  12,
  12,
  12,
  12,
  11.9,
  11.6,
  11,
  10.2,
  9.2,
  8.2,
  7.1,
  6.2,
  5.6,
  5.4,
  5.3,
  5.4,
  5.6,
  5.9,
  6.2,
  6.5,
  6.8,
  7.1,
  7.3,
  7.5,
  7.6,
  7.7,
  7.3,
  6.2,
  5.2,
  2.7,
  1.4,
  -1.2,
  -2.8,
  -3.8,
  -4.8,
  -5.5,
  -5.3,
  -5.6,
  -5.7,
  -5.9,
  -6,
  -6.3,
  -6.5,
  -6.2,
  -4.7,
  -2.8,
  -0.1,
  2.6,
  5.3,
  7.7,
  10.4,
  13.3,
  16,
  18.2,
  20.2,
  21.1,
  22.4,
  23.5,
  23.8,
  24.3,
  24,
  23.9,
  23.9,
  23.7,
  24,
  24.3,
  25.3,
  26.2,
  27.3,
  28.2,
  29.1,
  30,
  30.7,
  31.4,
  32.2,
  33.1,
  34,
  35,
  36.5,
  38.3,
  40.2,
  42.2,
  44.5,
  46.5,
  48.5,
  50.5,
  52.2,
  53.8,
  54.9,
  55.8,
  56.9,
  58.3,
  60,
  61.6,
  63,
  65,
  66.6
];
function deltat(c) {
  if (1620 <= c && 2e3 >= c) {
    var b = Math.floor((c - 1620) / 2);
    b = deltaTtab[b] + (deltaTtab[b + 1] - deltaTtab[b]) * ((c - 1620) / 2 - b);
  } else
    (b = (c - 2e3) / 100),
      948 > c
        ? (b = 2177 + 497 * b + 44.1 * b * b)
        : ((b = 102 + 102 * b + 25.3 * b * b),
          2e3 < c && 2100 > c && (b += 0.37 * (c - 2100)));
  return b;
}
var EquinoxpTerms = [
  485,
  324.96,
  1934.136,
  203,
  337.23,
  32964.467,
  199,
  342.08,
  20.186,
  182,
  27.85,
  445267.112,
  156,
  73.14,
  45036.886,
  136,
  171.52,
  22518.443,
  77,
  222.54,
  65928.934,
  74,
  296.72,
  3034.906,
  70,
  243.58,
  9037.513,
  58,
  119.81,
  33718.147,
  52,
  297.17,
  150.678,
  50,
  21.02,
  2281.226,
  45,
  247.54,
  29929.562,
  44,
  325.15,
  31555.956,
  29,
  60.93,
  4443.417,
  18,
  155.12,
  67555.328,
  17,
  288.79,
  4562.452,
  16,
  198.04,
  62894.029,
  14,
  199.76,
  31436.921,
  12,
  95.39,
  14577.848,
  12,
  287.11,
  31931.756,
  12,
  320.81,
  34777.259,
  9,
  227.73,
  1222.114,
  8,
  15.45,
  16859.074
];
(JDE0tab1000 = [
  [1721139.29189, 365242.1374, 0.06134, 0.00111, -71e-5],
  [1721233.25401, 365241.72562, -0.05323, 0.00907, 25e-5],
  [1721325.70455, 365242.49558, -0.11677, -0.00297, 74e-5],
  [1721414.39987, 365242.88257, -0.00769, -0.00933, -6e-5]
]),
  (JDE0tab2000 = [
    [2451623.80984, 365242.37404, 0.05169, -0.00411, -57e-5],
    [2451716.56767, 365241.62603, 0.00325, 0.00888, -3e-4],
    [2451810.21715, 365242.01767, -0.11575, 0.00337, 78e-5],
    [2451900.05952, 365242.74049, -0.06223, -0.00823, 32e-5]
  ]);
function equinox(i, b) {
  var a, j, k;
  if (1e3 > i)
    var l = JDE0tab1000,
      m = i / 1e3;
  else (l = JDE0tab2000), (m = (i - 2e3) / 1e3);
  (l =
    l[b][0] +
    l[b][1] * m +
    l[b][2] * m * m +
    l[b][3] * m * m * m +
    l[b][4] * m * m * m * m),
    (m = (l - 2451545) / 36525);
  var n = 35999.373 * m - 2.47;
  for (
    n = 1 + 0.0334 * dcos(n) + 7e-4 * dcos(2 * n), a = j = k = 0;
    24 > a;
    a++
  )
    (k +=
      EquinoxpTerms[j] * dcos(EquinoxpTerms[j + 1] + EquinoxpTerms[j + 2] * m)),
      (j += 3);
  return l + (1e-5 * k) / n;
}
function sunpos(i) {
  var j = (i - J2000) / JulianCentury,
    o = j * j,
    p = fixangle(280.46646 + 36000.76983 * j + 3032e-7 * o),
    e = fixangle(357.52911 + 35999.05029 * j + -1537e-7 * o),
    g = 0.016708634 + -42037e-9 * j + -1.267e-7 * o;
  o =
    (1.914602 + -0.004817 * j + -14e-6 * o) * dsin(e) +
    (0.019993 - 101e-6 * j) * dsin(2 * e) +
    289e-6 * dsin(3 * e);
  var f = p + o,
    d = e + o,
    h = (1.000001018 * (1 - g * g)) / (1 + g * dcos(d)),
    n = 125.04 - 1934.136 * j;
  j = f + -0.00569 + -0.00478 * dsin(n);
  var q = obliqeq(i);
  (n = q + 0.00256 * dcos(n)),
    (i = rtd(Math.atan2(dcos(q) * dsin(f), dcos(f)))),
    (i = fixangle(i)),
    (q = rtd(Math.asin(dsin(q) * dsin(f))));
  var r = rtd(Math.atan2(dcos(n) * dsin(j), dcos(j)));
  return (
    (r = fixangle(r)),
    (n = rtd(Math.asin(dsin(n) * dsin(j)))),
    [p, e, g, o, f, d, h, j, i, q, r, n]
  );
}
function equationOfTime(d) {
  var f = (d - J2000) / JulianMillennium,
    g = fixangle(
      280.4664567 +
        360007.6982779 * f +
        0.03032028 * f * f +
        (f * f * f) / 49931 +
        -((f * f * f * f) / 15300) +
        -((f * f * f * f * f) / 2e6)
    );
  f = sunpos(d)[10];
  var c = nutation(d)[0];
  return (
    (d = obliqeq(d) + nutation(d)[1]),
    (d = g + -0.0057183 + -f + c * dcos(d)),
    (d -= 20 * Math.floor(d / 20)),
    d / 1440
  );
}
