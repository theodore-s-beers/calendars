var J2000 = 2451545,
	JulianCentury = 36525,
	JulianMillennium = 365250,
	AstronomicalUnit = 149597870,
	TropicalYear = 365.24219878;

function astor(b) {
	return b * (Math.PI / 648e3)
}

function dtr(b) {
	return b * Math.PI / 180
}

function rtd(b) {
	return 180 * b / Math.PI
}

function fixangle(b) {
	return b - 360 * Math.floor(b / 360)
}

function fixangr(b) {
	return b - 2 * Math.PI * Math.floor(b / (2 * Math.PI))
}

function dsin(b) {
	return Math.sin(dtr(b))
}

function dcos(b) {
	return Math.cos(dtr(b))
}

function mod(b, a) {
	return b - a * Math.floor(b / a)
}

function amod(b, a) {
	return mod(b - 1, a) + 1
}

function jhms(b) {
	var c;
	return c = 86400 * ((b += .5) - Math.floor(b)) + .5, [Math.floor(c / 3600), Math.floor(c / 60 % 60), Math.floor(c % 60)]
}
var Weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

function jwday(b) {
	return mod(Math.floor(b + 1.5), 7)
}
var oterms = [-4680.93, -1.55, 1999.25, -51.38, -249.67, -39.05, 7.12, 27.87, 5.79, 2.45];

function obliqeq(b) {
	var a, c, g, i;
	if (g = c = (b - J2000) / 3652500, a = 23.43929111111111, 1 > Math.abs(c))
		for (i = 0; 10 > i; i++) a += oterms[i] / 3600 * g, g *= c;
	return a
}
var nutArgMult = [0, 0, 0, 0, 1, -2, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, -2, 1, 0, 2, 2, 0, 0, 0, 2, 1, 0, 0, 1, 2, 2, -2, -1, 0, 2, 2, -2, 0, 1, 0, 0, -2, 0, 0, 2, 1, 0, 0, -1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 0, -1, 2, 2, 0, 0, -1, 0, 1, 0, 0, 1, 2, 1, -2, 0, 2, 0, 0, 0, 0, -2, 2, 1, 2, 0, 0, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 0, 0, -2, 0, 1, 2, 2, 0, 0, 0, 2, 0, -2, 0, 0, 2, 0, 0, 0, -1, 2, 1, 0, 2, 0, 0, 0, 2, 0, -1, 0, 1, -2, 2, 0, 2, 2, 0, 1, 0, 0, 1, -2, 0, 1, 0, 1, 0, -1, 0, 0, 1, 0, 0, 2, -2, 0, 2, 0, -1, 2, 1, 2, 0, 1, 2, 2, 0, 1, 0, 2, 2, -2, 1, 1, 0, 0, 0, -1, 0, 2, 2, 2, 0, 0, 2, 1, 2, 0, 1, 0, 0, -2, 0, 2, 2, 2, -2, 0, 1, 2, 1, 2, 0, -2, 0, 1, 2, 0, 0, 0, 1, 0, -1, 1, 0, 0, -2, -1, 0, 2, 1, -2, 0, 0, 0, 1, 0, 0, 2, 2, 1, -2, 0, 2, 0, 1, -2, 1, 0, 2, 1, 0, 0, 1, -2, 0, -1, 0, 1, 0, 0, -2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 2, 0, -1, -1, 1, 0, 0, 0, 1, 1, 0, 0, 0, -1, 1, 2, 2, 2, -1, -1, 2, 2, 0, 0, -2, 2, 2, 0, 0, 3, 2, 2, 2, -1, 0, 2, 2],
	nutArgCoeff = [-171996, -1742, 92095, 89, -13187, -16, 5736, -31, -2274, -2, 977, -5, 2062, 2, -895, 5, 1426, -34, 54, -1, 712, 1, -7, 0, -517, 12, 224, -6, -386, -4, 200, 0, -301, 0, 129, -1, 217, -5, -95, 3, -158, 0, 0, 0, 129, 1, -70, 0, 123, 0, -53, 0, 63, 0, 0, 0, 63, 1, -33, 0, -59, 0, 26, 0, -58, -1, 32, 0, -51, 0, 27, 0, 48, 0, 0, 0, 46, 0, -24, 0, -38, 0, 16, 0, -31, 0, 13, 0, 29, 0, 0, 0, 29, 0, -12, 0, 26, 0, 0, 0, -22, 0, 0, 0, 21, 0, -10, 0, 17, -1, 0, 0, 16, 0, -8, 0, -16, 1, 7, 0, -15, 0, 9, 0, -13, 0, 7, 0, -12, 0, 6, 0, 11, 0, 0, 0, -10, 0, 5, 0, -8, 0, 3, 0, 7, 0, -3, 0, -7, 0, 0, 0, -7, 0, 3, 0, -7, 0, 3, 0, 6, 0, 0, 0, 6, 0, -3, 0, 6, 0, -3, 0, -6, 0, 3, 0, -6, 0, 3, 0, 5, 0, 0, 0, -5, 0, 3, 0, -5, 0, 3, 0, -5, 0, 3, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, -4, 0, 0, 0, -4, 0, 0, 0, -4, 0, 0, 0, 3, 0, 0, 0, -3, 0, 0, 0, -3, 0, 0, 0, -3, 0, 0, 0, -3, 0, 0, 0, -3, 0, 0, 0, -3, 0, 0, 0, -3, 0, 0, 0];

function nutation(b) {
	var a, c, g, j, k, m, p = (b - 2451545) / 36525,
		n = [],
		o = 0,
		q = 0;
	for (j = p * (g = p * p), n[0] = dtr(297.850363 + 445267.11148 * p - .0019142 * g + j / 189474), n[1] = dtr(357.52772 + 35999.05034 * p - 1603e-7 * g - j / 3e5), n[2] = dtr(134.96298 + 477198.867398 * p + .0086972 * g + j / 56250), n[3] = dtr(93.27191 + 483202.017538 * p - .0036825 * g + j / 327270), n[4] = dtr(125.04452 - 1934.136261 * p + .0020708 * g + j / 45e4), a = 0; 5 > a; a++) n[a] = fixangr(n[a]);
	for (k = p / 10, a = 0; 63 > a; a++) {
		for (c = m = 0; 5 > c; c++) 0 != nutArgMult[5 * a + c] && (m += nutArgMult[5 * a + c] * n[c]);
		o += (nutArgCoeff[4 * a + 0] + nutArgCoeff[4 * a + 1] * k) * Math.sin(m), q += (nutArgCoeff[4 * a + 2] + nutArgCoeff[4 * a + 3] * k) * Math.cos(m)
	}
	return [o / 36e6, q / 36e6]
}

function ecliptoeq(b, a, c) {
	var d, e;
	return d = dtr(obliqeq(b)), log += "Obliquity: " + rtd(d) + "\n", e = rtd(Math.atan2(Math.cos(d) * Math.sin(dtr(a)) - Math.tan(dtr(c)) * Math.sin(d), Math.cos(dtr(a)))), log += "RA = " + e + "\n", [e = fixangle(rtd(Math.atan2(Math.cos(d) * Math.sin(dtr(a)) - Math.tan(dtr(c)) * Math.sin(d), Math.cos(dtr(a))))), rtd(Math.asin(Math.sin(d) * Math.sin(dtr(a)) * Math.cos(dtr(c)) + Math.sin(dtr(c)) * Math.cos(d)))]
}
var deltaTtab = [121, 112, 103, 95, 88, 82, 77, 72, 68, 63, 60, 56, 53, 51, 48, 46, 44, 42, 40, 38, 35, 33, 31, 29, 26, 24, 22, 20, 18, 16, 14, 12, 11, 10, 9, 8, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 13, 13.1, 12.5, 12.2, 12, 12, 12, 12, 12, 12, 11.9, 11.6, 11, 10.2, 9.2, 8.2, 7.1, 6.2, 5.6, 5.4, 5.3, 5.4, 5.6, 5.9, 6.2, 6.5, 6.8, 7.1, 7.3, 7.5, 7.6, 7.7, 7.3, 6.2, 5.2, 2.7, 1.4, -1.2, -2.8, -3.8, -4.8, -5.5, -5.3, -5.6, -5.7, -5.9, -6, -6.3, -6.5, -6.2, -4.7, -2.8, -.1, 2.6, 5.3, 7.7, 10.4, 13.3, 16, 18.2, 20.2, 21.1, 22.4, 23.5, 23.8, 24.3, 24, 23.9, 23.9, 23.7, 24, 24.3, 25.3, 26.2, 27.3, 28.2, 29.1, 30, 30.7, 31.4, 32.2, 33.1, 34, 35, 36.5, 38.3, 40.2, 42.2, 44.5, 46.5, 48.5, 50.5, 52.2, 53.8, 54.9, 55.8, 56.9, 58.3, 60, 61.6, 63, 65, 66.6];

function deltat(b) {
	var a, c, g, i;
	return 1620 <= b && 2e3 >= b ? (c = (b - 1620) / 2 - (g = Math.floor((b - 1620) / 2)), a = deltaTtab[g] + (deltaTtab[g + 1] - deltaTtab[g]) * c) : (i = (b - 2e3) / 100, 948 > b ? a = 2177 + 497 * i + 44.1 * i * i : (a = 102 + 102 * i + 25.3 * i * i, 2e3 < b && 2100 > b && (a += .37 * (b - 2100)))), a
}
var EquinoxpTerms = [485, 324.96, 1934.136, 203, 337.23, 32964.467, 199, 342.08, 20.186, 182, 27.85, 445267.112, 156, 73.14, 45036.886, 136, 171.52, 22518.443, 77, 222.54, 65928.934, 74, 296.72, 3034.906, 70, 243.58, 9037.513, 58, 119.81, 33718.147, 52, 297.17, 150.678, 50, 21.02, 2281.226, 45, 247.54, 29929.562, 44, 325.15, 31555.956, 29, 60.93, 4443.417, 18, 155.12, 67555.328, 17, 288.79, 4562.452, 16, 198.04, 62894.029, 14, 199.76, 31436.921, 12, 95.39, 14577.848, 12, 287.11, 31931.756, 12, 320.81, 34777.259, 9, 227.73, 1222.114, 8, 15.45, 16859.074];

function equinox(b, a) {
	var c, d, g, j, k, m, p, q, t;
	for (1e3 > b ? (k = JDE0tab1000, t = b / 1e3) : (k = JDE0tab2000, t = (b - 2e3) / 1e3), c = 1 + .0334 * dcos(q = 35999.373 * (p = ((j = k[a][0] + k[a][1] * t + k[a][2] * t * t + k[a][3] * t * t * t + k[a][4] * t * t * t * t) - 2451545) / 36525) - 2.47) + 7e-4 * dcos(2 * q), d = g = m = 0; 24 > d; d++) m += EquinoxpTerms[g] * dcos(EquinoxpTerms[g + 1] + EquinoxpTerms[g + 2] * p), g += 3;
	return j + 1e-5 * m / c
}

function sunpos(b) {
	var a, c, g, j, k, m, p, q, v, w, x, y, z;
	return k = .016708634 + -42037e-9 * (a = (b - J2000) / JulianCentury) + -1.267e-7 * (c = a * a), p = (g = fixangle(g = 280.46646 + 36000.76983 * a + 3032e-7 * c)) + (m = (1.914602 + -.004817 * a + -14e-6 * c) * dsin(j = fixangle(j = 357.52911 + 35999.05029 * a + -1537e-7 * c)) + (.019993 - 101e-6 * a) * dsin(2 * j) + 289e-6 * dsin(3 * j)), v = 1.000001018 * (1 - k * k) / (1 + k * dcos(q = j + m)), x = p + -.00569 + -.00478 * dsin(w = 125.04 - 1934.136 * a), y = (z = obliqeq(b)) + .00256 * dcos(w), [g, j, k, m, p, q, v, x, fixangle(rtd(Math.atan2(dcos(z) * dsin(p), dcos(p)))), rtd(Math.asin(dsin(z) * dsin(p))), fixangle(rtd(Math.atan2(dcos(y) * dsin(x), dcos(x)))), rtd(Math.asin(dsin(y) * dsin(x)))]
}

function equationOfTime(b) {
	var a, c;
	return a = fixangle(280.4664567 + 360007.6982779 * (c = (b - J2000) / JulianMillennium) + .03032028 * c * c + c * c * c / 49931 + -c * c * c * c / 15300 + -c * c * c * c * c / 2e6) + -.0057183 + -sunpos(b)[10] + nutation(b)[0] * dcos(obliqeq(b) + nutation(b)[1]), (a -= 20 * Math.floor(a / 20)) / 1440
}
JDE0tab1000 = [
	[1721139.29189, 365242.1374, .06134, .00111, -71e-5],
	[1721233.25401, 365241.72562, -.05323, .00907, 25e-5],
	[1721325.70455, 365242.49558, -.11677, -.00297, 74e-5],
	[1721414.39987, 365242.88257, -.00769, -.00933, -6e-5]
], JDE0tab2000 = [
	[2451623.80984, 365242.37404, .05169, -.00411, -57e-5],
	[2451716.56767, 365241.62603, .00325, .00888, -3e-4],
	[2451810.21715, 365242.01767, -.11575, .00337, 78e-5],
	[2451900.05952, 365242.74049, -.06223, -.00823, 32e-5]
];